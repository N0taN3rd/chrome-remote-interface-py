from typing import Any, List, Optional, Union, TypeVar
from cripy.helpers import ProtocolType
{% for import in timports %}
from cripy.protocol.{{ import | lower }} import types as {{ import }}
{% endfor %}

{#{%+ for dt in py_types %}#}
{#{% if dt.description is defined %}#}
{#{{ dt.id }} = TypeVar("{{ dt.id }}", {{ dt.type.safe_type }}, {{ dt.type.safe_type }}) # {{ dt.code_description }}#}
{#{% endif %}#}
{##}
{#{% endfor %}#}

{%+ for dt in obj_types %}
{% if dt.has_properties %}
class {{ dt.id }}(ProtocolType):
{% else %}
class {{ dt.id }}(ProtocolType, dict):
{% endif %}
{% if dt.description %}
    """
    {{ dt.description }}
    """

{% endif %}
{% if dt.has_properties %}
    def __init__(self, {{ dt.constructor_string }}) -> None:
        """
        {% for prop in dt.properties %}
        {% if prop.description %}
        :param {{ prop.name }}: {{ prop.nice_description }}
        {% else %}
        :param {{ prop.name }}: The {{ prop.name }}
        {% endif %}
        :type {{ prop.name }}: {{ prop.constructor_docstr }}
        {% endfor %}
        """
        super().__init__()
    {% for prop in dt.properties %}
        {{ prop.construct_thyself }}
{#        self.{{ prop.tinfo_str }} = {{ prop.name }}#}
    {% endfor %}

{% endif %}
    @staticmethod
    def safe_create(init: Optional[dict]) -> Optional[Union['{{ dt.id }}', dict]]:
        if init is not None:
             try:
                ourselves = {{ dt.id }}(**init)
                return ourselves
             except Exception:
                return init
        else:
            return init

    @staticmethod
    def safe_create_from_list(init: Optional[List[dict]]) -> Optional[List[Union['{{ dt.id }}', dict]]]:
        if init is not None:
            list_of_self = []
            for it in init:
                list_of_self.append({{ dt.id }}.safe_create(it))
            return list_of_self
        else:
            return init


{% endfor %}
{% if obj_types | length > 0 %}
TYPE_TO_OBJECT = {
{% for dt in obj_types %}
    "{{ dt.id }}": {{ dt.id }},
{% endfor %}
}
{% endif %}