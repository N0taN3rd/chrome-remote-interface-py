from typing import Any, List, Optional, Union
{% for import in timports %}
from cripy.async.protocol.{{ import | lower }} import types as {{ import }}
{% endfor %}

__all__ = [
{%+ for dt in obj_types %}
    "{{ dt.type_name }}",
{% endfor %}
    "{{ domain | upper }}_TYPES_TO_OBJECT"
]


{%+ for dt in obj_types %}
{% if dt.has_properties %}
class {{ dt.type_name }}(object):
{% else %}
class {{ dt.type_name }}(dict):
{% endif %}
{% if dt.description %}
    """
    {{ dt.description }}
    """

{% endif %}
{% if dt.has_properties %}
    __slots__ = [{{ slotgen(dt.properties) }}]

    def __init__(self, {{ dt.constructor_string }}) -> None:
        """
        {% for prop in dt.properties %}
        {% if prop.description %}
        :param {{ prop.name }}: {{ prop.nice_description }}
        {% else %}
        :param {{ prop.name }}: The {{ prop.name }}
        {% endif %}
        :type {{ prop.name }}: {{ prop.constructor_docstr }}
        {% endfor %}
        """
        super().__init__()
    {% for prop in dt.properties %}
        {{ prop.construct_thyself }}
{#        self.{{ prop.tinfo_str }} = {{ prop.name }}#}
    {% endfor %}
{% endif %}

    def __repr__(self) -> str:
        {% if dt.has_properties %}
        repr_args = []
        {% for prop in dt.properties %}
        if self.{{ prop.name }} is not None:
            repr_args.append("{{ prop.name }}={!r}".format(self.{{ prop.name }}))
        {% endfor %}
        return "{{ dt.type_name }}(" + ', '.join(repr_args)+")"
        {% else %}
        return "{{ dt.type_name }}(dict)"
        {% endif %}

    @staticmethod
    def safe_create(init: Optional[dict]) -> Optional[Union['{{ dt.type_name }}', dict]]:
        """
        Safely create {{ dt.type_name }} from the supplied init dictionary.

        This method will not throw an Exception and will return a new instance of {{ dt.type_name }}
        if init is not None otherwise returns init or None if init was None.

        :param init: The init dictionary
        :type init: dict
        :return: A new instance of {{ dt.type_name }} if creation did not fail
        :rtype: Optional[Union[dict, {{ dt.type_name}}]]
        """
        if init is not None:
            try:
                ourselves = {{ dt.type_name }}(**init)
                return ourselves
            except Exception:
                return init
        else:
            return init

    @staticmethod
    def safe_create_from_list(init: Optional[List[dict]]) -> Optional[List[Union['{{ dt.type_name }}', dict]]]:
        """
        Safely create a new list {{ dt.type_name }}s from the supplied list of dictionaries.

        This method will not throw an Exception and will return a new list {{ dt.type_name }} instances
        if init is not None otherwise returns init or None if init was None.

        :param init: The init dictionary
        :type init: dict
        :return: A new list of {{ dt.type_name }} instances if creation did not fail
        :rtype: Optional[List[Union[dict, {{ dt.type_name}}]]]
        """
        if init is not None:
            list_of_self = []
            for it in init:
                list_of_self.append({{ dt.type_name }}.safe_create(it))
            return list_of_self
        else:
            return init


{% endfor %}
{% if obj_types | length > 0 %}
{{ domain | upper }}_TYPES_TO_OBJECT = {
{% for dt in obj_types %}
    "{{ dt.type_name }}": {{ dt.type_name }},
{% endfor %}
}
{% endif %}