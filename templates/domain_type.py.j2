from typing import Any, List, Optional, Set, Union, TypeVar
from cripy.helpers import ChromeTypeBase
{% for import in timports %}
from cripy.protocol.{{ import | lower }} import types as {{ import }}
{% endfor %}

{%+ for dt in py_types %}
{{ dt.id }} = TypeVar("{{ dt.id }}", {{ dt.type.safe_type }}, {{ dt.type.safe_type }})
{% if dt.description is defined %}
"""{{ dt.code_description }}"""
{% endif %}

{% endfor %}

{%+ for dt in obj_types %}
{% if dt.has_properties %}
class {{ dt.id }}(ChromeTypeBase):
{% else %}
class {{ dt.id }}(ChromeTypeBase, dict):
{% endif %}
{% if dt.description %}
    """{{ dt.description }}"""
{% else %}
    {% if not dt.has_properties %}
    pass
    {% endif %}
{% endif %}
{% if dt.has_properties %}
    def __init__(self, {{ dt.constructor_string }}) -> None:
        """
        {% for prop in dt.properties %}
        {% if prop.description %}
        :param {{ prop.name }}: {{ prop.nice_description }}
        {% else %}
        :param {{ prop.name }}: The {{ prop.name }}
        {% endif %}
        :type {{ prop.name }}: {{ prop.type }}
        {% endfor %}
        """
        super().__init__()
    {% for prop in dt.properties %}
{#        {{ prop.construct_theyself }}#}
        self.{{ prop.tinfo_str }} = {{ prop.name }}
    {% endfor %}
{% endif %}


{% endfor %}
