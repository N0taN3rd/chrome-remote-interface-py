{% set dl = d.domain | lower %}
from typing import Any, Callable, ClassVar, List, Optional, Union, TYPE_CHECKING

import attr

if TYPE_CHECKING:
    from .client import Client

__all__ = ["{{ d.domain }}"]


@attr.dataclass(slots=True)
class {{ d.domain }}(object):
{% if d.description %}
    """
    {{ d.description }}
    """

{% endif %}
    client: "Client" = attr.ib(repr=False)
{% if d.has_deps %}
    {{ d.dep_list_str_typed }}
{% endif %}

    {% for command in d.commands %}
    {% if command.has_parameters %}
    async def {{ command.name }}(self, {{ command.command_arg_string }}) -> Optional[dict]:
    {% else %}
    async def {{ command.name }}(self) -> Optional[dict]:
    {% endif %}
        {% if command.has_parameters %}
        """
        {% if command.description %}
        {{ command.description }}

        {% endif %}
        {% for prop in command.parameters %}
        {% if prop.description %}
        :param {{ prop.name }}: {{ prop.nice_description }}
        {% else %}
        :param {{ prop.name }}: The {{ prop.name }}
        {% endif %}
        :type {{ prop.name }}: {{ prop.constructor_docstr }}
        {% endfor %}
        """
        {% elif command.description %}
        """
        {{ command.description }}
        """
        {% endif %}
        {% if command.has_parameters %}
        msg_dict = dict()
        {% for param in command.parameters %}
        if {{ param.name }} is not None:
            msg_dict['{{ param.name }}'] = {{ param.name }}
        {% endfor %}
        res = await self.client.send('{{ command.scoped_name }}', msg_dict)
        {% else %}
        res = await self.client.send('{{ command.scoped_name }}')
        {% endif %}
        return res

    {% endfor %}
    {% if events %}
    {% for e, d in events %}
    def {{ onEvent(e) }}(self, fn: Callable[..., Any], once: bool = False) -> None:
        {% if d %}
        """
        {% for l in d %}
        {{ l }}
        {% endfor %}
        """
        {% endif %}
        if once:
            self.client.once("{{ e }}", fn)
        else:
            self.client.on("{{ e }}", fn)

    {% endfor %}
    {% endif %}



