from typing import Any, List, Optional, Union
from cripy.helpers import BaseEvent
{% for import in timports %}
from cripy.protocol.{{ import | lower }} import types as {{ import }}
{% endfor %}
try:
    from cripy.protocol.{{ domain | lower }}.types import *
except ImportError:
    pass


{%+ for event in events %}
{% if event.has_parameters %}
class {{ event.class_name }}(BaseEvent):
{% else %}
class {{ event.class_name }}(BaseEvent, dict):
{% endif %}
    {% if event.description %}
    """
    {{ event.description }}
    """
    {% endif %}

    event = "{{ event.scoped_name }}"

    {% if event.has_parameters %}
    def __init__(self, {{ event.constructor_string }}) -> None:
        {% if event.has_parameters %}
        """
        {% for prop in event.parameters %}
        {% if prop.description %}
        :param {{ prop.name }}: {{ prop.nice_description }}
        {% else %}
        :param {{ prop.name }}: The {{ prop.name }}
        {% endif %}
        :type {{ prop.name }}: {{ prop.constructor_docstr }}
        {% endfor %}
        """
        {% endif %}
        super().__init__()
        {% if event.has_parameters %}
        {% for prop in event.parameters %}
        {{ prop.construct_thyself }}
        {% endfor %}
        {% endif %}
    {% else %}
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)
    {% endif %}

    @staticmethod
    def safe_create(init: Optional[dict]) -> Optional['{{ event.class_name }}']:
        if init is not None:
            return {{ event.class_name }}(**init)
        else:
            return init

    @staticmethod
    def safe_create_from_list(init: Optional[List[dict]]) -> Optional[List['{{ event.class_name }}']]:
        if init is not None:
            list_of_self = []
            for it in init:
                list_of_self.append({{ event.class_name }}(**it))
            return list_of_self
        else:
            return init


{% endfor %}
EVENT_TO_CLASS = {
{% for ename, clazz in event_to_clazz %}
   "{{ ename }}": {{ clazz }},
{% endfor %}
}


