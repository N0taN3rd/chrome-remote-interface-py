from typing import Any, List, Optional, Set, Union
from cripy.helpers import BaseEvent
{% for import in timports %}
from cripy.protocol.{{ import | lower }} import types as {{ import }}
{% endfor %}
{% if types is defined and types %}
from cripy.protocol.{{ domain | lower }}.types import (
{% for t in types %}
    {{ t }},
{% endfor %}
)
{% endif %}


{%+ for event in events %}
class {{ event.class_name }}(BaseEvent):
    {% if event.description %}
    """{{ event.description }}"""
    {% endif %}

    event: str = "{{ event.scoped_name }}"

    def __init__(self, {{ event.constructor_string }}) -> None:
        {% if event.has_parameters %}
        """
        {% for prop in event.parameters %}
        {% if prop.description %}
        :param {{ prop.name }}: {{ prop.nice_description }}
        {% else %}
        :param {{ prop.name }}: The {{ prop.name }}
        {% endif %}
        :type {{ prop.name }}: {{ prop.type }}
        {% endfor %}
        """
        {% endif %}
        super().__init__()
        {% if event.has_parameters %}
        {% for prop in event.parameters %}
        self.{{ prop.tinfo_str }} = {{ prop.name }}
        {% endfor %}
        {% endif %}


{% endfor %}
EVENT_TO_CLASS = {
{% for ename, clazz in event_to_clazz %}
   "{{ ename }}": {{ clazz }},
{% endfor %}
}


