{% set dl = d.domain | lower %}
{% for import in timports %}
from cripy.gevent.protocol.{{ import | lower }} import types as {{ import }}
{% endfor %}
{% if d.has_events %}
from cripy.gevent.protocol.{{ dl }} import events as Events
{% endif %}
{% if d.has_types %}
from cripy.gevent.protocol.{{ dl }} import types as Types
{% endif %}

__all__ = ["{{ d.domain }}"]


class {{ d.domain }}(object):
{% if d.description %}
    """
    {{ d.description }}
    """

{% endif %}
{% if d.has_deps %}
    {{ d.dep_list_str }}

{% endif %}
{% if d.has_events %}
    events = Events.{{ d.domain | upper }}_EVENTS_NS

{% endif %}
    def __init__(self, chrome):
        """
        Construct a new {{ d.domain }} object

        :param chrome: An instance of the devtools protocol client
        """
        self.chrome = chrome

    {% for command in d.commands %}
    {% if command.has_parameters %}
    def {{ command.name }}(self, {{ command.command_arg_string_no_types }}):
    {% else %}
    def {{ command.name }}(self):
    {% endif %}
        {% if command.has_parameters %}
        """
        {% if command.description %}
        {{ command.description }}

        {% endif %}
        {% for prop in command.parameters %}
        {% if prop.description %}
        :param {{ prop.name }}: {{ prop.nice_description }}
        {% else %}
        :param {{ prop.name }}: The {{ prop.name }}
        {% endif %}
        :type {{ prop.name }}: {{ prop.constructor_docstr }}
        {% endfor %}
        """
        {% elif command.description %}
        """
        {{ command.description }}
        """
        {% endif %}
        {% if command.has_parameters %}
        msg_dict = dict()
        {% for param in command.parameters %}
        if {{ param.name }} is not None:
            msg_dict['{{ param.name }}'] = {{ param.name }}
        {% endfor %}
        wres = self.chrome.send('{{ command.scoped_name }}', msg_dict)
        {% else %}
        wres = self.chrome.send('{{ command.scoped_name }}')
        {% endif %}
        {% if command.returns %}
        res = wres.get()
        {% for trans in command.returns.yield_result_trans() %}
        {{ trans }}
        {% endfor %}
        return res
        {% else %}
        return wres.get()
        {% endif %}

    {% endfor %}
    {% if events %}
    {% for e, _ in events %}
    def {{ onEvent(e) }}(self, fn, once=False):
        self.chrome.on("{{ e }}", fn, once=once)

    {% endfor %}
    {% endif %}
    @staticmethod
    def get_event_classes():
        """
        Retrieve a dictionary of events emitted by the {{ dup }} domain to their python class

        If {{ dup }} has events this method returns a dictionary of
        fully qualified event name (str) to it python class

        :return: Dictionary of the {{ dup }} domain event classes
        :retype: Optional[dict]
        """
        {% if d.has_events %}
        return Events.{{ d.domain | upper }}_EVENTS_TO_CLASS
        {% else %}
        return None
        {% endif %}


