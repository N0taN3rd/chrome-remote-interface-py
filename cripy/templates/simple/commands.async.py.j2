"""This is an auto-generated file. Modify at your own risk"""
{% set dl = d.domain | lower %}
from typing import Awaitable,{% if events %} Any, Callable,{% endif %} Dict, List, Optional, Union, TYPE_CHECKING

import attr

if TYPE_CHECKING:
    from cripy import ConnectionType, SessionType

__all__ = ["{{ d.domain }}"]


@attr.dataclass(slots=True, cmp=False)
class {{ d.domain }}(object):
{% if d.description %}
    """
    {{ d.description }}
    """

{% endif %}
    client: Union["ConnectionType", "SessionType"] = attr.ib()

    {% for command in d.commands %}
    {% if command.has_parameters %}
    def {{ command.name }}(self, {{ command.command_arg_string }}) -> Awaitable[Dict]:
    {% else %}
    def {{ command.name }}(self) -> Awaitable[Dict]:
    {% endif %}
        {% if command.has_parameters %}
        """
        {% if command.description %}
        {{ command.description }}

        {% endif %}
        {% for prop in command.parameters %}
        {% if prop.description %}
        :param {{ prop.name }}: {{ prop.nice_description }}
        {% else %}
        :param {{ prop.name }}: The {{ prop.name }}
        {% endif %}
        :type {{ prop.name }}: {{ prop.constructor_docstr }}
        {% endfor %}
        """
        {% elif command.description %}
        """
        {{ command.description }}
        """
        {% endif %}
        {% if command.has_parameters %}
        msg_dict = dict()
        {% for param in command.parameters %}
        if {{ param.name }} is not None:
            msg_dict["{{ param.name }}"] = {{ param.name }}
        {% endfor %}
        return self.client.send("{{ command.scoped_name }}", msg_dict)
        {% else %}
        return self.client.send("{{ command.scoped_name }}")
        {% endif %}

    {% endfor %}
    {% if events %}
    {% for e, d in events %}
    def {{ onEvent(e) }}(self, cb: Optional[Callable[..., Any]] = None) -> Any:
        {% if d %}
        """
        {% for l in d %}
        {{ l }}
        {% endfor %}
        """
        {% endif %}
        if cb is None:
            future = self.client.loop.create_future()

            def _cb(msg: Optional[Any] = None) -> None:
                future.set_result(msg)

            self.client.once("{{ e }}", _cb)

            return future

        self.client.on("{{ e }}", cb)
        return lambda: self.client.remove_listener("{{ e }}", cb)

    {% endfor %}
    {% endif %}


