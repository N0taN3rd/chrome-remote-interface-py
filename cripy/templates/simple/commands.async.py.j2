"""This is an auto-generated file. Modify at your own risk"""
from typing import Awaitable, Any,{% if d.events %} Callable,{% endif %} Dict, List, Optional, Union, TYPE_CHECKING

if TYPE_CHECKING:
    from cripy import ConnectionType, SessionType

__all__ = ["{{ d.domain }}"]


class {{ d.domain }}:
    """
{% for section in d.description_parts() %}
  {% for part in section %}
    {{ part }}
  {% endfor %}
{% endfor %}
    """

    __slots__ = ["client"]

    def __init__(self, client: Union["ConnectionType", "SessionType"]) -> None:
        """Initialize a new instance of {{ d.domain }}

        :param client: The client instance to be used to communicate with the remote browser instance
        """
        self.client: Union["ConnectionType", "SessionType"] = client

{% for command in d.commands %}
    {{ command.command_sig() }}
{% if command.has_description %}
        """
  {% for descript in command.description_parts() %}
        {{ descript }}
  {% endfor %}
  {% if command.is_deprecation_or_experimental %}

        {{ command.deprecation_experimental_status() }}

  {% else %}

  {% endif %}
        {{ command.command_link() }}
{% else %}
        """
  {% if command.is_deprecation_or_experimental %}
        {{ command.deprecation_experimental_status() }}

  {% endif %}
        {{ command.command_link() }}
{% endif %}
{% if command.has_parameters %}

  {% for param in command.parameters %}
        {{ param.doc_string() }}
  {% endfor %}
{% else %}

{% endif %}
        :return: The results of the command
        """
{% if command.has_parameters %}
{% set required, optional = command.required_optional_params() %}
  {% if required and not optional %}
        return self.client.send("{{d.domain}}.{{ command.name }}", {{ required }})
  {% else %}
   {% if required %}
        msg = {{ required }}
   {% else %}
        msg = {}
   {% endif %}
  {% for param_name in optional %}
        if {{ param_name }} is not None:
            msg["{{ param_name }}"] = {{ param_name }}
  {% endfor %}
        return self.client.send("{{d.domain}}.{{ command.name }}", msg)
  {% endif %}
{% else %}
        return self.client.send("{{d.domain}}.{{ command.name }}", {})
{% endif %}

{% endfor %}
{% if d.events %}
  {% for event in d.events %}
    def {{ event.name }}(self, listener: Optional[Callable[[{{ event.event_sig() }}], Any]] = None) -> Any:
        """
  {% if event.has_description %}
     {% for descript in event.description_parts() %}
        {{ descript }}
     {% endfor %}

        {{ event.event_link() }}
  {% else %}
        {{ event.event_link() }}
  {% endif %}

        :param listener: Optional listener function
        :return: If a listener was supplied the return value is a callable that
        will remove the supplied listener otherwise a future that resolves
        with the value of the event
        """
        event_name = "{{ d.domain }}.{{ event.name }}"
        if listener is None:
            future = self.client.loop.create_future()

            def _listener(event: Optional[Dict] = None) -> None:
                future.set_result(event)

            self.client.once(event_name, _listener)

            return future

        self.client.on(event_name, listener)
        return lambda: self.client.remove_listener(event_name, listener)

  {% endfor %}
{% endif %}