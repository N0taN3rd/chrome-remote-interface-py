from typing import Any, List, Optional, Union
from collections import namedtuple
{% for import in timports %}
from cripy.asyncio.protocol.{{ import | lower }} import types as {{ import }}
{% endfor %}
{% if dhastype %}
from cripy.asyncio.protocol.{{ domain | lower }}.types import *
{% endif %}
{% set dup = domain | upper %}

__all__ = [
{%+ for event in events %}
    "{{event.class_name}}",
{% endfor %}
    "{{ dup }}_EVENTS_TO_CLASS",
    "{{ domain | upper }}_EVENTS_NS"
]


{%+ for event in events %}
{% if event.has_parameters %}
class {{ event.class_name }}(object):
{% else %}
class {{ event.class_name }}(dict):
{% endif %}
    {% if event.description %}
    """
    {{ event.description }}
    """
    {% endif %}


    {% if event.has_parameters %}
    __slots__ = [{{ slotgen(event.parameters) }}]

    def __init__(self, {{ event.constructor_string }}) -> None:
        {% if event.has_parameters %}
        """
        Create a new instance of {{ event.class_name }}

        {% for prop in event.parameters %}
        {% if prop.description %}
        :param {{ prop.name }}: {{ prop.nice_description }}
        {% else %}
        :param {{ prop.name }}: The {{ prop.name }}
        {% endif %}
        :type {{ prop.name }}: {{ prop.constructor_docstr }}
        {% endfor %}
        """
        {% else %}
        """
        Create a new instance of {{ event.class_name }}
        """
        {% endif %}
        super().__init__()
        {% if event.has_parameters %}
        {% for prop in event.parameters %}
        {{ prop.construct_thyself }}
        {% endfor %}
        {% endif %}
    {% else %}
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)
    {% endif %}

    def __repr__(self) -> str:
        {% if event.has_parameters %}
        repr_args = []
        {% for prop in event.parameters %}
        if self.{{ prop.name }} is not None:
            repr_args.append("{{ prop.name }}={!r}".format(self.{{ prop.name }}))
        {% endfor %}
        return "{{ event.class_name }}(" + ', '.join(repr_args)+")"
        {% else %}
        return "{{ event.class_name }}(dict)"
        {% endif %}

    @staticmethod
    def safe_create(init: Optional[dict]) -> Optional[Union['{{ event.class_name }}', dict]]:
        """
        Safely create {{ event.class_name }} from the supplied init dictionary.

        This method will not throw an Exception and will return a new instance of {{ event.class_name }}
        if init is not None otherwise returns init or None if init was None.

        :param init: The init dictionary
        :type init: dict
        :return: A new instance of {{ event.class_name }} if creation did not fail
        :rtype: Optional[Union[dict, {{ event.class_name }}]]
        """
        if init is not None:
            try:
                ourselves = {{ event.class_name }}(**init)
                return ourselves
            except Exception:
                return init
        else:
            return init

    @staticmethod
    def safe_create_from_list(init: Optional[List[dict]]) -> Optional[List[Union['{{ event.class_name }}', dict]]]:
        """
        Safely create a new list {{ event.class_name }}s from the supplied list of dictionaries.

        This method will not throw an Exception and will return a new list {{ event.class_name }} instances
        if init is not None otherwise returns init or None if init was None.

        :param init: The init dictionary
        :type init: dict
        :return: A new list of {{ event.class_name }} instances if creation did not fail
        :rtype: Optional[List[Union[dict, {{ event.class_name }}]]]
        """
        if init is not None:
            list_of_self = []
            for it in init:
                list_of_self.append({{ event.class_name }}.safe_create(it))
            return list_of_self
        else:
            return init


{% endfor %}
{{ dup }}_EVENTS_TO_CLASS = {
{% for ename, clazz in event_to_clazz %}
   "{{ ename }}": {{ clazz }},
{% endfor %}
}

{{ domain }}NS = namedtuple("{{ domain }}NS", [{{ event_ns_init(event_to_clazz) }}])

{{ dup }}_EVENTS_NS = {{ domain }}NS(
{% for ename, clazz in event_to_clazz %}
  {{ pascalcase(ename.split('.')[1]) }}="{{ ename }}",
{% endfor %}
)

